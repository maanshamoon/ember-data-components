{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","dummy/tests/helpers/ember-cli-clipboard.js","dummy/tests/lint/app.lint-test.js","dummy/tests/lint/templates.template.lint-test.js","dummy/tests/lint/tests.lint-test.js","dummy/tests/test-helper.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"dummy/tests/helpers/ember-cli-clipboard\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.triggerSuccess = triggerSuccess;\n  _exports.triggerError = triggerError;\n  _exports.default = _default;\n\n  /* === Integration Test Helpers === */\n\n  /**\n   * Fires `success` action for an instance of a copy-button component\n   * @function triggerSuccess\n   * @param {Object} context - integration test’s this context\n   * @param {String|Element} selector - selector of the copy-button instance\n   * @returns {Void}\n   */\n  function triggerSuccess(context, selector) {\n    fireComponentAction(context, selector, 'success');\n  }\n  /**\n   * Fires `error` action for an instance of a copy-button component\n   * @function triggerError\n   * @param {Object} context - integration test’s this context\n   * @param {String|Element} selector - selector of the copy-button instance\n   * @returns {Void}\n   */\n\n\n  function triggerError(context, selector) {\n    fireComponentAction(context, selector, 'error');\n  }\n  /* === Acceptance Test Helpers === */\n\n  /**\n   * Default export is a function that registers acceptance test helpers\n   */\n\n\n  function _default() {\n    Ember.Test.registerAsyncHelper('triggerCopySuccess', function (app, selector = '.copy-btn') {\n      fireComponentActionFromApp(app, selector, 'success');\n    });\n    Ember.Test.registerAsyncHelper('triggerCopyError', function (app, selector = '.copy-btn') {\n      fireComponentActionFromApp(app, selector, 'error');\n    });\n  }\n  /* === Private Functions === */\n\n  /**\n   * Fires named action for an instance of a copy-button component in an app\n   * @function fireComponentActionFromApp\n   * @param {Object} app - Ember application\n   * @param {String|Element} selector - selector of the copy-button instance\n   * @param {String} actionName - name of action\n   * @returns {Void}\n   */\n\n\n  function fireComponentActionFromApp(app, selector, actionName) {\n    fireComponentAction({\n      container: app.__container__,\n      $: app.$\n    }, selector, actionName);\n  }\n  /**\n   * Fires named action for an instance of a copy-button component\n   * @function fireComponentAction\n   * @param {Object} context - test context\n   * @param {String|Element} selector - selector of the copy-button instance\n   * @param {String} actionName - name of action\n   * @returns {Void}\n   */\n\n\n  function fireComponentAction(context, selector, actionName) {\n    let component = getComponentBySelector(context, selector);\n    fireActionByName(component, actionName);\n  }\n  /**\n   * Fetches component reference for a given context and selector\n   * @function getComponentBySelector\n   * @param {Object} context - test context\n   * @param {String|Element} selector - selector of the copy-button instance\n   * @returns {Object} component object\n   */\n\n\n  function getComponentBySelector(context, selector = '.copy-btn') {\n    let emberId = context.$(selector).attr('id');\n    return context.container.lookup('-view-registry:main')[emberId];\n  }\n  /**\n   * Fires a component's action given an action name\n   * @function fireActionByName\n   * @param {Ember.Component} component - component to fire action from\n   * @param {String} actionName - name of action\n   * @returns {Void}\n   */\n\n\n  function fireActionByName(component, actionName) {\n    let action = component[actionName];\n    Ember.run(() => {\n      if (typeof action === 'string') {\n        component.sendAction(action);\n      } else {\n        action();\n      }\n    });\n  }\n});","define(\"dummy/tests/lint/app.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | app');\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('models/post.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/post.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/docs.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/docs.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('serializers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/application.js should pass ESLint\\n\\n');\n  });\n});","define(\"dummy/tests/lint/templates.template.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('TemplateLint');\n  QUnit.test('dummy/templates/application.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/application.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('dummy/templates/docs.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/docs.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('dummy/templates/index.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dummy/templates/index.hbs should pass TemplateLint.\\n\\n');\n  });\n});","define(\"dummy/tests/lint/tests.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | tests');\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n});","define(\"dummy/tests/test-helper\", [\"dummy/app\", \"dummy/config/environment\", \"@ember/test-helpers\", \"ember-qunit\"], function (_app, _environment, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define('dummy/config/environment', [], function() {\n  var prefix = 'dummy';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingshHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}